using System.Collections.Generic;
using System.Diagnostics;

namespace Rasa.Managers
{
    using Data;
    using Packets.MapChannel.Server;
    using Structures;

    public class EntityManager
    {
        private static EntityManager _instance;
        private static readonly object InstanceLock = new object();
<<<<<<< origin/dev-EnterWorld
        public Dictionary<uint, MapChannelClient> EntityTable = new Dictionary<uint, MapChannelClient>();
        public Dictionary<uint, Item> ItemTable = new Dictionary<uint, Item>();

=======
>>>>>>> local
        private uint _entityId = 1000;
        private object _entityIdLock = new object();
        private List<uint> _freeEntityIds = new List<uint>();

<<<<<<< origin/dev-EnterWorld
        public static EntityManager Instance
        {
            get
            {
                // ReSharper disable once InvertIf
                if (_instance == null)
                {
                    lock (InstanceLock)
                    {
                        if (_instance == null)
                            _instance = new EntityManager();
                    }
                }

                return _instance;
            }
        }
        public uint NextEntityId
        {
            get
            {
                lock (_entityIdLock)
                {
                    if (_freeEntityIds.Count > 0)
                    {
                        var freeEntityId = _freeEntityIds[0];

                        _freeEntityIds.RemoveAt(0);

                        return freeEntityId;
                    }

                    return _entityId++;
                }
            }
        }

        public void FreeEntity(uint id)
        {
            lock (_entityIdLock)
                _freeEntityIds.Add(id);
        }
=======
        public Dictionary<uint, EntityType> RegisteredEntities = new Dictionary<uint, EntityType>();
>>>>>>> local

        public Dictionary<uint, Item> Items = new Dictionary<uint, Item>();
        public Dictionary<uint, MapChannelClient> MapClients = new Dictionary<uint, MapChannelClient>();
        public Dictionary<uint, Actor> Actors = new Dictionary<uint, Actor>();

<<<<<<< origin/dev-EnterWorld
        public void RegisterEntity(uint entityId, MapChannelClient entity)
        {
            EntityTable.Add(entityId, entity);
        }

        public void UnregisterEntity(uint entityId)
        {
            EntityTable.Remove(entityId);
=======
        public static EntityManager Instance
        {
            get
            {
                // ReSharper disable once InvertIf
                if (_instance == null)
                {
                    lock (InstanceLock)
                    {
                        if (_instance == null)
                            _instance = new EntityManager();
                    }
                }

                return _instance;
            }
        }
        // All Entities (everything in game)
        public void DestroyPhysicalEntity(MapChannelClient mapClient, uint entityId, EntityType entityType)
        {
            // destroy entity
            mapClient.Player.Client.SendPacket(5, new DestroyPhysicalEntityPacket { EntityId = entityId });
            //free entity
            switch (entityType)
            {
                
                case EntityType.MapClient:
                    break;
                case EntityType.Player:
                    break;
                case EntityType.Entity:
                    break;
                case EntityType.Object:
                    break;
                case EntityType.Npc:
                    break;
                case EntityType.Creature:
                    break;
                case EntityType.Item:
                    {
                        FreeEntity(entityId);
                        UnregisterItem(entityId);
                        break;
                    }
                default:
                    {
                        Debugger.Break();
                        break;
                    }
            }
                    
        }

        public uint GetEntityId
        {
            get
            {
                lock (_entityIdLock)
                {
                    if (_freeEntityIds.Count > 0)
                    {
                        var freeEntityId = _freeEntityIds[0];

                        _freeEntityIds.RemoveAt(0);

                        return freeEntityId;
                    }

                    return _entityId++;
                }
            }
>>>>>>> local
        }

        public void FreeEntity(uint id)
        {
            lock (_entityIdLock)
                _freeEntityIds.Add(id);
        }

        public void RegisterEntity(uint entityId, EntityType type)
        {
            RegisteredEntities.Add(entityId, type);
        }

        public void UnregisterEntity(uint entityId)
        {
            RegisteredEntities.Remove(entityId);
        }
        // Actors
        public Actor GetActor(uint entityId)
        {
            return Actors[entityId];
        }

        public void RegisterActor(uint entityId, Actor actor)
        {
            Actors.Add(entityId, actor);
        }

        public void UnregisterActor(uint entityId)
        {
            Actors.Remove(entityId);
        }
        // Items
        public Item GetItem(uint entityId)
<<<<<<< origin/dev-EnterWorld
=======
        {
            return Items[entityId];
        }

        public void RegisterItem(uint entityId, Item item)
        {
            Items.Add(entityId, item);
        }

        public void UnregisterItem(uint entityId)
        {
            Items.Remove(entityId);
        }

        // MapClients
        public MapChannelClient GetMapClient(uint entityId)
>>>>>>> local
        {
            return MapClients[entityId];
        }

<<<<<<< origin/dev-EnterWorld
        public void RegisterItem(uint entityId, Item item)
=======
        public void RegisterMapClient(uint entityId, MapChannelClient mapClient)
>>>>>>> local
        {
            MapClients.Add(entityId, mapClient);
        }

<<<<<<< origin/dev-EnterWorld
        public void UnregisterItem(uint entityId)
=======
        public void UnregisterMapClient(uint entityId)
>>>>>>> local
        {
            MapClients.Remove(entityId);
        }
    }
}
